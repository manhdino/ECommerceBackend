   
paths:

   /auth/sign-in:
    post:
      tags:
        - auth
      description: Allows users to sign in to the application with their credentials. 
      operationId: sign-in
      requestBody:
        description: User Information
        content:
          application/json:
            schema:
               type: object
               properties:
                email:
                 type: string
                 example: "dinomanh123@gmail.com"
                password:
                 type: string
                 example: "12345678"
        required: true
      responses:
        '200':
          description: User signed in successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: object
                 properties:
                   user:
                    type: object
                    $ref: '#/components/schemas/User'
                   access_token:
                     type: string
                     example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImlhdCI6MTcxNDk2NjIxNCwiZXhwIjoxNzE0OTY5ODE0fQ.9TGf42_7umYPLE2pXkOdQ-HQgreKKK5Nwm6OyZIRwIU"
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
             
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'          
   /auth/sign-up:
    post:
      tags:
        - auth
      description: Create a new user with the provided credentials.
      operationId: sign-up
      requestBody:
        description:  User Information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "nhatminh123@gmail.com"
                password:
                  type: string
                  format: password
                  example: "12345678"
                confirmPassword:
                  type: string
                  format: password
                  example: "12345678"
      responses:
        '201':
          description: User created successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: object
                 properties:
                  user:
                    type: object
                    $ref: '#/components/schemas/User'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /users:
    get:
      tags:
        - user
      description: Get all user
      operationId: all-user
      responses:
        '200':
          description: Get all user successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: array
                 items:
                    type: object
                    $ref: '#/components/schemas/User'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /categories:
    get:
      tags:
        - category
      description: Get all category
      operationId:  all-cate
      responses:
        '200':
          description: Get all category successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: array
                 items:
                    type: object
                    $ref: '#/components/schemas/Category'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /categories/{categoryId}:
    get:
      tags:
        - category
      description: Get detais category
      operationId: detail-cate
      parameters:
        - in: path
          name: categoryId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of the category to get information
      responses:
        '200':
          description: Get details category successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: object
                 $ref: '#/components/schemas/Category'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'    
   /categories/create:
    post:
      tags:
        - category
      description: Creates a new category with the provided name.
      operationId: create-cate
      requestBody:
        description: The name of the new category.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Sneaker"
      responses:
        '200':
          description: Category created successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: "Category created sucessfully"
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'    
   /categories/update/{categoryId}:
    put:
      tags:
        - category
      description: Updates the details of a category identified by categoryId.
      operationId: update-cate
      parameters:
        - in: path
          name: categoryId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of the category to update
      requestBody:
        description: The name of the  category.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Sneaker"
      responses:
        '200':
          description: Category updated successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: Category updated successfully
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /categories/delete/{categoryId}:
    delete:
      tags:
        - category
      description: Deletes a category identified by categoryId
      operationId: delete-cate
      parameters:
        - in: path
          name: categoryId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of the category to delete
      responses:
        '200':
          description: Category deleted successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: Category deleted successfully
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /products:
    get:
      tags:
        - product
      description: Get all product
      operationId: all-product
      responses:
        '200':
          description: Get all product successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: array
                 items:
                    type: object
                    $ref: '#/components/schemas/DetailsProduct'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /products/{productId}:
    get:
      tags:
        - product
      description: Get details product
      operationId: details-product
      parameters:
        - in: path
          name: productId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of the product to get information
      responses:
        '200':
          description: Get details product successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: object
                 $ref: '#/components/schemas/DetailsProduct'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /products/list/{categoryId}:
    get:
      tags:
        - product
      description: Get list of products identified by categoryId.
      operationId: list-product
      parameters:
        - in: path
          name: categoryId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of the category to get information
      responses:
        '200':
          description: Get list of products successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: array
                 items:
                  type: object
                  allOf:
                  - type: object
                    properties:
                     id:
                       type: integer
                       format: int64
                       example: 1
                     category_id:
                       type: integer
                       example: "4"
                  - $ref: "#/components/schemas/BaseProduct"
                  - type: object
                    properties:
                      created_at:
                       type: string
                       format: date-time
                       example: "2024-05-06T12:00:00Z"
                      updated_at:
                       type: string
                       format: date-time
                       example: 2024-05-06T12:00:00Z"
                  
          
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /products/create:
    post:
      tags:
        - product
      description: Create a new product.
      operationId: create-product
      requestBody:
        description: Product Information
        required: true
        content:
          application/json:
            schema:
             type: object
             allOf:
              - type: object
                properties:
                  categoryId:
                    type: integer
                    format: int64
                    example: 1
              - $ref: "#/components/schemas/BaseProduct"
            
                 
      responses:
        '200':
          description: Post created successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: "Post created successfully"
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /products/update/{productId}:
    put:
      tags:
        - product
      description: Update product.
      operationId: update-product
      parameters:
        - in: path
          name: productId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of product to update
      requestBody:
        description: Product Information
        required: true
        content:
          application/json:
            schema:
             type: object
             allOf:
              - type: object
                properties:
                  categoryId:
                    type: integer
                    format: int64
                    example: 1
              - $ref: "#/components/schemas/BaseProduct"
            
                 
      responses:
        '200':
          description: Post updated successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: "Post updated successfully"
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /products/delete/{productId}:
    delete:
      tags:
        - product
      description: Delete product.
      operationId: delete-product
      parameters:
        - in: path
          name: productId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of product to delete
                 
      responses:
        '200':
          description: Post deleted successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: "Post deleted successfully"
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /orders:
    get:
      tags:
        - order
      description: Get all order
      operationId:  all-order
      responses:
        '200':
          description: Get all order successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: array
                 items:
                    type: object
                    $ref: '#/components/schemas/Order'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /carts:
    get:
      tags:
        - cart
      description: Get all product in shopping cart
      security:
        - BearerAuth: []
      operationId:  all-cart
      responses:
        '200':
          description: Get all product in shopping cart successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: array
                 items:
                    type: object
                    $ref: '#/components/schemas/Cart'
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
   /carts/add/{productId}:
    post:
      tags:
        - cart
      description: Add product to shopping cart.
      operationId: add-product-cart
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of product add to shopping cart
        - in: query
          name: quantity
          required: true
          schema:
            type: integer
            minimum: 1
          description: Quantity of the product added
      responses:
        '200':
          description: Add product to shopping cart successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: Add product to shopping cart successfully
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'    
   /carts/delete/{productId}:
    delete:
      tags:
        - cart
      description: Delete a produt in shopping cart 
      operationId: delete-product-cart
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId  
          required: true
          schema:
            type: integer
            minimum: 1
          description: The Id of product add to shopping cart
      responses:
        '200':
          description: Product in shopping cart deleted successfully
          content:
           application/json:
            schema:
               type: object
               properties:
                success:
                 type: string
                 example: true
                data:
                 type: string
                 example: Product in shopping cart deleted successfully
                status:
                 type: integer
                 example: 200
                message:
                 type: string
                 example: "ok"
                
        '404':
          description: Not Found
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Error Validate
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ValidateResponse'
